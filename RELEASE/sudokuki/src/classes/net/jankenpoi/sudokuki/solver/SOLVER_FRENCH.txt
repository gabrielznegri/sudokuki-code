int
solver::resolve()
{
    // DONE: des qu'une cellule est vide mais n'a plus de valeur possible: IMPASSE!!!

    short* p_cur = m_pmem; // location in memory of 1st grid <- current grid
    short* p_next = p_cur + grid_len; // 2nd grid <- next grid

    memcpy( p_next, p_cur, grid_len*sizeof(short) ); // 1                      ///////////////////////////////
	- Copy current grid shadow to next shadow
/*XXX Copy current shadow to next shadow position */

    p_cur = p_next; // 2                                                        /////////////////////////////
    - Pointer sur la premiere cellule du next shadow qui devient le current GridShadow
/* XXX */
    
    grid* p_gr_cur;
    p_gr_cur = new grid( p_cur, false );// create a grid at cur. pos (without memory re-init) // 2.1
	- new GridShadow

    for( int iter=1; iter < MAX_ITER_NB; iter++ ) {

        short cur_li, cur_co, dummy_nb, val;
        int res;

        res = p_gr_cur->pop_min_poss_cell(&cur_li, &cur_co, &dummy_nb); // 3, 4     //////////////////////// XXX
        // =>the "current cell" (cur_li,cur_co) has the min dummy_nb of poss values
        
        if ( 2 == res ) {                                                           /////////// XXX

			// TABLE COMPLETE
				
            m_pcur_grid = p_cur; // used in current_grid_values_get()
            return 1;
            
        } else if ( 3 == res ) {                                                    /////////// XXX
            
                // DEAD-END
                
                DBGM("DEAD-END found in min_poss_cell_pop(). Go back 1 position...");   //////////////////////
                p_cur = p_cur - grid_len;
                delete p_gr_cur;
                p_gr_cur = new grid( p_cur, false );
                continue;
        }
        
        int res_value_pop;
        res_value_pop = p_gr_cur->pop_value(cur_li, cur_co, &val); // 5                 //////////////////////// XXX
        // =>popped an available value val from the "current cell" in the current grid
        assert ( 1 == res_value_pop );
        DBGF("popped val: %d", val);
        delete p_gr_cur;
        DBGM("after delete p_gr_cur;");




        p_next = p_cur + grid_len; // 6
        memcpy( p_next, p_cur, grid_len*sizeof(short) ); // 6                          /////////////////////////
        DBGM("after memcpy( p_next, p_cur, grid_len*sizeof(short) ); // 6");
        p_gr_cur = new grid( p_cur, false ); // 7
        DBGM("before cell_value_screen");
        p_gr_cur->screen_cell_value(cur_li, cur_co, val); // 7                         /////////////////////////
        delete p_gr_cur;

        p_next = p_cur + grid_len; // 8
        p_cur = p_next; // 8
        p_gr_cur = new grid( p_cur, false ); // 8                                     //////////////////////////

        assert ( 1 <= val && val <= 9 );
        assert ( 0 <= cur_li && cur_li <= 9 );
        assert ( 0 <= cur_co && cur_co <= 9 );
        int res_value_set = p_gr_cur->set_cell_value(cur_li, cur_co, val); // 8.1


        if ( 3 == res_value_set /* impasse */ ) {                                     ///////////////////////////
            p_cur = p_cur - grid_len; // 9
            delete p_gr_cur;
            p_gr_cur = new grid( p_cur, false ); // 9.1
            
            // IMPASSE - retour arriere d'une position...(3 == res_value_set /* impasse */)");

        }

    }
    return -10;
}
